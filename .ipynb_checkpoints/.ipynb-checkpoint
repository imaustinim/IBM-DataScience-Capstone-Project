{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Toronto, despite being a major city in the world, is often viewed as boring. I believe that this is due to the lack of after-work activities provided. I hope to dive deeper into this problem, create a feasible solution, and maybe even put it into action.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "If there are actually a lack of 'fun' things to do in Toronto, certain metrics will be able to determine if this is true or not.\n",
    "Some questions I hope to find the answer to using the data are:\n",
    "    \n",
    "Compared to other major cities, what kind of venues are lacking? (A follow up question to that is: why are they lacking? This will require more research outside of the foursquare data and may depend on laws that affect alcohol distribution, or are dependent on the cost of living, etc.)\n",
    "\n",
    "Once deciding on the venue to pursue, I will have to decide where it will be located. I can scrape the internet for the rent prices, income levels, population density, that match the type of business I want to start. I would also like to look into accessability going to and from the venue. At this stage, I would have to look into other metrics that factor into if customers were to come to that area or that type of venue."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "CLIENT_ID = 'Y1PZQ4UQX0XRYB5YMWSHH05PWS2F0R4S4SI4F05KIUJZ1JDX' # your Foursquare ID\n",
    "CLIENT_SECRET = 'FFMOJY1UQXST5XXCTUIGWVLENGPG2VDDJIYF201YLOXUTG30' # your Foursquare Secret\n",
    "VERSION = '20180605' # Foursquare API version"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/bin/sh: conda: command not found\n",
      "/bin/sh: conda: command not found\n",
      "Libraries imported.\n"
     ]
    }
   ],
   "source": [
    "import numpy as np # library to handle data in a vectorized manner\n",
    "import pandas as pd\n",
    "\n",
    "pd.set_option('display.max_columns', None)\n",
    "pd.set_option('display.max_rows', None)\n",
    "\n",
    "import json # library to handle JSON files\n",
    "\n",
    "!conda install -c conda-forge geopy --yes # uncomment this line if you haven't completed the Foursquare API lab\n",
    "from geopy.geocoders import Nominatim # convert an address into latitude and longitude values\n",
    "\n",
    "import requests # library to handle requests\n",
    "from pandas.io.json import json_normalize # tranform JSON file into a pandas dataframe\n",
    "\n",
    "# Matplotlib and associated plotting modules\n",
    "import matplotlib.cm as cm\n",
    "import matplotlib.colors as colors\n",
    "\n",
    "# import k-means from clustering stage\n",
    "from sklearn.cluster import KMeans\n",
    "\n",
    "!conda install -c conda-forge folium=0.5.0 --yes # uncomment this line if you haven't completed the Foursquare API lab\n",
    "import folium # map rendering library\n",
    "\n",
    "print('Libraries imported.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import lxml.html as lh\n",
    "import geocoder"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [],
   "source": [
    "url='https://en.wikipedia.org/wiki/List_of_cities_by_international_visitors'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Create a handle, page, to handle the contents of the website\n",
    "page = requests.get(url)\n",
    "#Store the contents of the website under doc\n",
    "doc = lh.fromstring(page.content)\n",
    "#Parse data that are stored between <tr>..</tr> of HTML\n",
    "tr_elements = doc.xpath('//tr')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8]"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the length of the first 12 rows\n",
    "[len(T) for T in tr_elements[:12]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1:RankEuromonitor\n",
      "\n",
      "2:RankMastercard\n",
      "\n",
      "3:City\n",
      "\n",
      "4:Country\n",
      "\n",
      "5:Arrivals 2017Euromonitor\n",
      "\n",
      "6:Arrivals 2016Mastercard\n",
      "\n",
      "7:Growthin arrivalsEuromonitor\n",
      "\n",
      "8:Income(billions $)Mastercard\n",
      "\n"
     ]
    }
   ],
   "source": [
    "#Create empty list\n",
    "col=[]\n",
    "i=0\n",
    "#For each row, store each first element (header) and an empty list\n",
    "for t in tr_elements[0]:\n",
    "    i+=1\n",
    "    name=t.text_content()\n",
    "    print('%d:%s'%(i,name))\n",
    "    col.append((name,[]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Since out first row is the header, data is stored on the second row onwards\n",
    "for j in range(1,len(tr_elements)):\n",
    "    #T is our j'th row\n",
    "    T=tr_elements[j]\n",
    "    \n",
    "    #If row is not of size 10, the //tr data is not from our table \n",
    "    if len(T)!=8:\n",
    "        break\n",
    "    \n",
    "    #i is the index of our column\n",
    "    i=0\n",
    "    \n",
    "    #Iterate through each element of the row\n",
    "    for t in T.iterchildren():\n",
    "        data=t.text_content() \n",
    "        #Check if row is empty\n",
    "        if i>0:\n",
    "        #Convert any numerical value to integers\n",
    "            try:\n",
    "                data=int(data)\n",
    "            except:\n",
    "                pass\n",
    "        #Append the data to the empty list of the i'th column\n",
    "        col[i][1].append(data)\n",
    "        #Increment i for the next column\n",
    "        i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[137, 137, 137, 137, 137, 137, 137, 137]"
      ]
     },
     "execution_count": 150,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Check the length of each column\n",
    "[len(C) for (title,C) in col]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RankEuromonitor\\n</th>\n",
       "      <th>RankMastercard\\n</th>\n",
       "      <th>City\\n</th>\n",
       "      <th>Country\\n</th>\n",
       "      <th>Arrivals 2017Euromonitor\\n</th>\n",
       "      <th>Arrivals 2016Mastercard\\n</th>\n",
       "      <th>Growthin arrivalsEuromonitor\\n</th>\n",
       "      <th>Income(billions $)Mastercard\\n</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1\\n</td>\n",
       "      <td>11</td>\n",
       "      <td>Hong Kong\\n</td>\n",
       "      <td>Hong Kong\\n</td>\n",
       "      <td>25,695,800\\n</td>\n",
       "      <td>8,370,000\\n</td>\n",
       "      <td>−3.1 %\\n</td>\n",
       "      <td>6.84\\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2\\n</td>\n",
       "      <td>1</td>\n",
       "      <td>Bangkok\\n</td>\n",
       "      <td>Thailand\\n</td>\n",
       "      <td>23,270,600\\n</td>\n",
       "      <td>21,470,000\\n</td>\n",
       "      <td>9.5 %\\n</td>\n",
       "      <td>14.84\\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3\\n</td>\n",
       "      <td>2</td>\n",
       "      <td>London\\n</td>\n",
       "      <td>United Kingdom\\n</td>\n",
       "      <td>19,842,800\\n</td>\n",
       "      <td>19,880,000\\n</td>\n",
       "      <td>3.4 %\\n</td>\n",
       "      <td>19.76\\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4\\n</td>\n",
       "      <td>6</td>\n",
       "      <td>Singapore\\n</td>\n",
       "      <td>Singapore\\n</td>\n",
       "      <td>17,681,800\\n</td>\n",
       "      <td>12,110,000\\n</td>\n",
       "      <td>6.1 %\\n</td>\n",
       "      <td>12.54\\n</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5\\n</td>\n",
       "      <td>\\n</td>\n",
       "      <td>Macau\\n</td>\n",
       "      <td>Macau\\n</td>\n",
       "      <td>16,299,100\\n</td>\n",
       "      <td>\\n</td>\n",
       "      <td>5.9 %\\n</td>\n",
       "      <td>\\n</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  RankEuromonitor\\n RankMastercard\\n       City\\n          Country\\n  \\\n",
       "0               1\\n               11  Hong Kong\\n        Hong Kong\\n   \n",
       "1               2\\n                1    Bangkok\\n         Thailand\\n   \n",
       "2               3\\n                2     London\\n   United Kingdom\\n   \n",
       "3               4\\n                6  Singapore\\n        Singapore\\n   \n",
       "4               5\\n               \\n      Macau\\n            Macau\\n   \n",
       "\n",
       "  Arrivals 2017Euromonitor\\n Arrivals 2016Mastercard\\n  \\\n",
       "0               25,695,800\\n               8,370,000\\n   \n",
       "1               23,270,600\\n              21,470,000\\n   \n",
       "2               19,842,800\\n              19,880,000\\n   \n",
       "3               17,681,800\\n              12,110,000\\n   \n",
       "4               16,299,100\\n                        \\n   \n",
       "\n",
       "  Growthin arrivalsEuromonitor\\n Income(billions $)Mastercard\\n  \n",
       "0                       −3.1 %\\n                         6.84\\n  \n",
       "1                        9.5 %\\n                        14.84\\n  \n",
       "2                        3.4 %\\n                        19.76\\n  \n",
       "3                        6.1 %\\n                        12.54\\n  \n",
       "4                        5.9 %\\n                             \\n  "
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Create dictionary and DataFrame\n",
    "Dict={title:column for (title,column) in col}\n",
    "df_raw=pd.DataFrame(Dict)\n",
    "df_raw.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['Hong Kong' 'Bangkok' 'London' 'Singapore' 'Macau' 'Dubai' 'Paris'\n",
      " 'New York City' 'Shenzhen' 'Kuala Lumpur']\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RankMastercard</th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Arrivals</th>\n",
       "      <th>Growth</th>\n",
       "      <th>City, Country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Hong Kong</td>\n",
       "      <td>Hong Kong</td>\n",
       "      <td>25,695,800</td>\n",
       "      <td>−3.1 %</td>\n",
       "      <td>Hong Kong, Hong Kong</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Bangkok</td>\n",
       "      <td>Thailand</td>\n",
       "      <td>23,270,600</td>\n",
       "      <td>9.5%</td>\n",
       "      <td>Bangkok, Thailand</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>London</td>\n",
       "      <td>United Kingdom</td>\n",
       "      <td>19,842,800</td>\n",
       "      <td>3.4%</td>\n",
       "      <td>London, United Kingdom</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>Singapore</td>\n",
       "      <td>17,681,800</td>\n",
       "      <td>6.1%</td>\n",
       "      <td>Singapore, Singapore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Macau</td>\n",
       "      <td>Macau</td>\n",
       "      <td>16,299,100</td>\n",
       "      <td>5.9%</td>\n",
       "      <td>Macau, Macau</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>Dubai</td>\n",
       "      <td>United Arab Emirates</td>\n",
       "      <td>16,010,000</td>\n",
       "      <td>7.7%</td>\n",
       "      <td>Dubai, United Arab Emirates</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>Paris</td>\n",
       "      <td>France</td>\n",
       "      <td>14,263,000</td>\n",
       "      <td>−0.9%</td>\n",
       "      <td>Paris, France</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>New York City</td>\n",
       "      <td>United States</td>\n",
       "      <td>13,100,000</td>\n",
       "      <td>3.6%</td>\n",
       "      <td>New York City, United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>Shenzhen</td>\n",
       "      <td>China</td>\n",
       "      <td>12,962,000</td>\n",
       "      <td>3.1%</td>\n",
       "      <td>Shenzhen, China</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>Kuala Lumpur</td>\n",
       "      <td>Malaysia</td>\n",
       "      <td>12,843,500</td>\n",
       "      <td>4.5%</td>\n",
       "      <td>Kuala Lumpur, Malaysia</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  RankMastercard           City               Country    Arrivals  Growth  \\\n",
       "0              1      Hong Kong             Hong Kong  25,695,800  −3.1 %   \n",
       "1              2        Bangkok              Thailand  23,270,600    9.5%   \n",
       "2              3         London        United Kingdom  19,842,800    3.4%   \n",
       "3              4      Singapore             Singapore  17,681,800    6.1%   \n",
       "4              5          Macau                 Macau  16,299,100    5.9%   \n",
       "5              6          Dubai  United Arab Emirates  16,010,000    7.7%   \n",
       "6              7          Paris                France  14,263,000   −0.9%   \n",
       "7              8  New York City         United States  13,100,000    3.6%   \n",
       "8              9       Shenzhen                 China  12,962,000    3.1%   \n",
       "9             10   Kuala Lumpur              Malaysia  12,843,500    4.5%   \n",
       "\n",
       "                  City, Country  \n",
       "0          Hong Kong, Hong Kong  \n",
       "1             Bangkok, Thailand  \n",
       "2        London, United Kingdom  \n",
       "3          Singapore, Singapore  \n",
       "4                  Macau, Macau  \n",
       "5   Dubai, United Arab Emirates  \n",
       "6                 Paris, France  \n",
       "7  New York City, United States  \n",
       "8               Shenzhen, China  \n",
       "9        Kuala Lumpur, Malaysia  "
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Clean up the DataFrame\n",
    "df = df_raw\n",
    "df.rename(columns={'RankEuromonitor\\n':'RankMastercard','City\\n':'City','Country\\n':'Country','Arrivals 2017Euromonitor\\n':'Arrivals','Growthin arrivalsEuromonitor\\n':'Growth'}, inplace=True)\n",
    "df = df.replace('\\n','', regex=True) #get rid of all \\n in the DataFrame\n",
    "df = df.replace('\\xa0','', regex=True) #get rid of all \\xa0 in the DataFrame\n",
    "df = df.replace('',np.nan, regex=True) #replace \"Not Assigned\" values to NaN\n",
    "print(df['City'].values[:10])\n",
    "df.drop(['RankMastercard\\n','Arrivals 2016Mastercard\\n','Income(billions $)Mastercard\\n'], axis=1,inplace=True)\n",
    "df.dropna(inplace=True) #drop rows that have NaN\n",
    "df['City, Country'] = df['City'] + ', ' + df['Country']\n",
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['Hong Kong, Hong Kong', 'Bangkok, Thailand',\n",
       "       'London, United Kingdom', 'Singapore, Singapore', 'Macau, Macau',\n",
       "       'Dubai, United Arab Emirates', 'Paris, France',\n",
       "       'New York City, United States', 'Shenzhen, China',\n",
       "       'Kuala Lumpur, Malaysia', 'Phuket, Thailand', 'Delhi, India',\n",
       "       'Tokyo, Japan', 'Rome, Italy', 'Taipei, Taiwan',\n",
       "       'Guangzhou, China', 'Mumbai, India', 'Mecca, Saudi Arabia',\n",
       "       'Istanbul, Turkey', 'Prague, Czech Republic',\n",
       "       'Miami, United States', 'Seoul, South Korea', 'Barcelona, Spain',\n",
       "       'Pattaya, Thailand', 'Shanghai, China', 'Milan, Italy',\n",
       "       'Cancún, Mexico', 'Agra, India', 'Las Vegas, United States',\n",
       "       'Amsterdam, Netherlands', 'Antalya, Turkey', 'Denpasar, Indonesia',\n",
       "       'Osaka, Japan', 'Los Angeles, United States', 'Vienna, Austria',\n",
       "       'Berlin, Germany', 'Madrid, Spain', 'Johor Bahru, Malaysia',\n",
       "       'Johannesburg, South Africa', 'Riyadh, Saudi Arabia',\n",
       "       'Ho Chi Minh City, Vietnam', 'Venice, Italy',\n",
       "       'Orlando, United States', 'Chennai, India', 'Jaipur, India',\n",
       "       'Athens, Greece', 'Dublin, Ireland', 'Florence, Italy',\n",
       "       'Moscow, Russia', 'Toronto, Canada'], dtype=object)"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Cities = df['City, Country'][:50].values\n",
    "Cities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_coordinates = []\n",
    "for city in Cities:\n",
    "    geolocator = Nominatim(user_agent=\"explorer\")\n",
    "    location = geolocator.geocode(city, timeout=10)\n",
    "    latitude = location.latitude\n",
    "    longitude = location.longitude\n",
    "    df_coordinates.append([city, latitude, longitude])\n",
    "print('Done!')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[['Hong Kong, Hong Kong', 22.350627, 114.1849161],\n",
       " ['Bangkok, Thailand', 13.7538929, 100.8160803],\n",
       " ['London, United Kingdom', 51.5073219, -0.1276474],\n",
       " ['Singapore, Singapore', 1.3408528, 103.878446863736],\n",
       " ['Macau, Macau', 22.1956294, 113.548784711485]]"
      ]
     },
     "execution_count": 181,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_coordinates[:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City, Country</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hong Kong, Hong Kong</td>\n",
       "      <td>22.350627</td>\n",
       "      <td>114.184916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Bangkok, Thailand</td>\n",
       "      <td>13.753893</td>\n",
       "      <td>100.816080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>London, United Kingdom</td>\n",
       "      <td>51.507322</td>\n",
       "      <td>-0.127647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Singapore, Singapore</td>\n",
       "      <td>1.340853</td>\n",
       "      <td>103.878447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Macau, Macau</td>\n",
       "      <td>22.195629</td>\n",
       "      <td>113.548785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            City, Country   Latitude   Longitude\n",
       "0    Hong Kong, Hong Kong  22.350627  114.184916\n",
       "1       Bangkok, Thailand  13.753893  100.816080\n",
       "2  London, United Kingdom  51.507322   -0.127647\n",
       "3    Singapore, Singapore   1.340853  103.878447\n",
       "4            Macau, Macau  22.195629  113.548785"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cols = ['City, Country','Latitude','Longitude']\n",
    "df1 = pd.DataFrame(df_coordinates, columns=cols)\n",
    "df1.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>City, Country</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "      <th>RankMastercard</th>\n",
       "      <th>City</th>\n",
       "      <th>Country</th>\n",
       "      <th>Arrivals</th>\n",
       "      <th>Growth</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Hong Kong, Hong Kong</td>\n",
       "      <td>22.350627</td>\n",
       "      <td>114.184916</td>\n",
       "      <td>1</td>\n",
       "      <td>Hong Kong</td>\n",
       "      <td>Hong Kong</td>\n",
       "      <td>25,695,800</td>\n",
       "      <td>−3.1 %</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          City, Country   Latitude   Longitude RankMastercard       City  \\\n",
       "0  Hong Kong, Hong Kong  22.350627  114.184916              1  Hong Kong   \n",
       "\n",
       "     Country    Arrivals  Growth  \n",
       "0  Hong Kong  25,695,800  −3.1 %  "
      ]
     },
     "execution_count": 191,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = pd.merge(df1, df, on=['City, Country'])\n",
    "df2.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>RankMastercard</th>\n",
       "      <th>City, Country</th>\n",
       "      <th>Arrivals</th>\n",
       "      <th>Growth</th>\n",
       "      <th>Latitude</th>\n",
       "      <th>Longitude</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Hong Kong, Hong Kong</td>\n",
       "      <td>25,695,800</td>\n",
       "      <td>−3.1 %</td>\n",
       "      <td>22.350627</td>\n",
       "      <td>114.184916</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Bangkok, Thailand</td>\n",
       "      <td>23,270,600</td>\n",
       "      <td>9.5%</td>\n",
       "      <td>13.753893</td>\n",
       "      <td>100.816080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>London, United Kingdom</td>\n",
       "      <td>19,842,800</td>\n",
       "      <td>3.4%</td>\n",
       "      <td>51.507322</td>\n",
       "      <td>-0.127647</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Singapore, Singapore</td>\n",
       "      <td>17,681,800</td>\n",
       "      <td>6.1%</td>\n",
       "      <td>1.340853</td>\n",
       "      <td>103.878447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Macau, Macau</td>\n",
       "      <td>16,299,100</td>\n",
       "      <td>5.9%</td>\n",
       "      <td>22.195629</td>\n",
       "      <td>113.548785</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  RankMastercard           City, Country    Arrivals  Growth   Latitude  \\\n",
       "0              1    Hong Kong, Hong Kong  25,695,800  −3.1 %  22.350627   \n",
       "1              2       Bangkok, Thailand  23,270,600    9.5%  13.753893   \n",
       "2              3  London, United Kingdom  19,842,800    3.4%  51.507322   \n",
       "3              4    Singapore, Singapore  17,681,800    6.1%   1.340853   \n",
       "4              5            Macau, Macau  16,299,100    5.9%  22.195629   \n",
       "\n",
       "    Longitude  \n",
       "0  114.184916  \n",
       "1  100.816080  \n",
       "2   -0.127647  \n",
       "3  103.878447  \n",
       "4  113.548785  "
      ]
     },
     "execution_count": 203,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df2 = df2[['RankMastercard','City, Country','Arrivals','Growth','Latitude','Longitude']]\n",
    "df2.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
